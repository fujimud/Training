Node.js Password Login Systems Tutorial
YouTube: https://www.youtube.com/watch?v=-RCnNyD0L-s
 See and working example: /Training/Login/Login_express/ejs


"1)":"npm init -y",
    Used to setup a new or existing npm package
    It's a way to create a json package that is used to store all depenadancies 
    like express and ejs
    
        a) package.json
        
    Link: https://docs.npmjs.com/cli/init#:~:text=npm%2Dinit%20create%20a%20package,json%20file&text=npm%20init%20can%20be,presumably%20creating%20or%20updating%20package.


"2)":"npm i express ejs",

    What is express:  It's an application server.

    The Express philosophy is to provide small, robust tooling for HTTP 
    servers, making it a great solution for single page applications, web sites, hybrids, 
    or public HTTP APIs. Express does not force you to use any specific ORM or template 
    engine.

    What is ejs (Embedded JavaScript): is a simple templating language that lets you generate HTML markup with 
    plain JavaScript. No religiousness about how to organize things. No reinvention of 
    iteration and control-flow. It's just plain JavaScript.

    Used mainly for template pages like ejs, Handlebars for a dynamic website
        JSON api that connect from the frontend like REACT

    const PORT = process.env.PORT || 5000  // looks for either the env PORT or PORT 5000

    link Express: https://www.coursereport.com/blog/what-is-express
    link ejs: https://ejs.co/#:~:text=EJS%20is%20a%20simple%20templating,about%20how%20to%20organize%20things.



"3)":"npm i --save-dev nodemon dotenv"
    -dev: only be visible in a dev environmet.

    What is nodemon: Allow us to automatically restart the server everytime changes are made,
                    but the browser will need to be refreshed.
    
    nodemon is a tool that helps develop node.js based applications by 
    automatically restarting the node application when file changes in the directory are 
    detected.

    nodemon does not require any additional changes to your code or method of development. 
    nodemon is a replacement wrapper for node. To use nodemon, replace the word node on the 
    command line when executing your script.

    


    What is dotenv: Allow us to have an .env file to store environment variables.

    Dotenv is a zero-dependency module that loads environment variables 
    from a .env file into process.env. Storing configuration in the environment separate 
    from code is based on The Twelve-Factor App methodology.



3.a) Create .env file - used to store environment variables which stores variables 
                        that the world should not see.
3.b) Create .gitignore file - used to identify files that should be ignored 
                        like .env & node_module.
3.c) Open "package.json": Dev env: add under <script> "devStart":"nodemond server.js"
                        Production env:  "dev":"node server.js"  
3.d) Create server.js file - enter JavaScript commands


    link: https://medium.com/@pdx.lucasm/dotenv-nodemon-a380629e8bff
    link dotenv: https://www.npmjs.com/package/dotenv
    link nodemon: https://www.npmjs.com/package/nodemon


"4)":"npm run devStart" 
    "devStart" was defined in "package.json"
    When started it will run the script devStart and restart the server each time changes are made.


"5)": "server.js"
    const express = require('express')
        const == constant variable
        express == variable name
        require function ==  Easiest way to include modules that exist in separate files. The 
        basic functionality of require is that it reads JavaScript file, execute the file, and
        then proceeds to return the exports object.
        'express' == will bring in "express" from node_module file.

    5.a) const app = express()  
        bring the app variable from express

    5.b) app.listen(3000) 
        3000 == port number for localhost
        Test: save, then from a browser enter 'localhost:3000' and should get 'Cannot GET /' 
        because no routes has yet been setup.

    5.c) app.get('/' (req, res) => {
        res.render('index.js')
    })
        '/': get information from the home page.
        'res.render('index.js')' : 

        link: https://www.npmjs.com/package/express-render

    5.d) Create views file  -- Location where render can store 'index.js'
            Create index.js

6) Use ejs
    app.set('view-engine', 'ejs')
        'view-engine' is not set to 'ejs'

    "link":"Top five Template engines"
        1. Mustache: Mustache is often considered the base for JavaScript templating.
        2. Underscore: Underscore is a utlity belt library for JavaScript.
        3. Embedded JS Template: Embedded JS (EJS) is inspired by ERB templates
        4. Handlebars JS
        5. Jade templating
        https://www.creativebloq.com/web-design/templating-engines-9134396


7) Navigate to another page without using 'href'
    7a. login.ejs 
        <form action='/login' method="POST">....

    7b. server.js 
        app.post('/login', (req, res) => {
            req.body.email  //email is the name=email from the ejs page
         })

    7c. app.use(express.urlencoded({extended, false}))
        Purpose: Take the data from the 'form' and pass it to the 'req' variable in the 
                post method 
    
8) npm i bcrypt
    Purpose: create a hasp password
        It has a default value of 10. 

    8a) Declare:
    const bcrypt = require('bcrypt')    // pull the file from node_module

    8b) server.js:
    app.post('/register', async (req, res) => {
    try {
        const hashPassword = await bcrypt.hash(req.body.password, 10)
    } catch {
        ...
    }
    })
    
    await: what for asyncronoss code to complete
    async: use to make use the '(req, res)' is identified as an asyncronoss function so that 
        'try-catch' can be used
    10 (default value): number of time to generate a hash or how secure to make the password

    8c) assign variables to an JS array
      const users = []

      users.push({
          id: Date.now().toString(),    //Not needed if using a database
          name: req.body.name,
          email: req.body.email,
          password: hasedPassword
      })

9) Redirect users
    res.redirect('/login')   // Redirect user to login.ejs


10) Passport.js - used for login authentication 
npm i passport passport-local express-session express-flash
    10a) passport: login authentication 
    10b) passport-local: authentication by using username and password, 
            there are other flavors like for Facebook, Google, MS, etc...
    10c) express-session: Store user so that they can navigate to other pages
    10d) express-flash: Error messages when user failed to login

    10e) recommended: create a separate file: passport-config.js
    10f) Make file required: 
            a) server.js
            const passport = require('passport')  // npm file that was installed

            const initializePassport = require('./passport-config')     // .js file 
            initializePassport(passport)

            const flash require('express-flash')
            const session require('express-session')

            b) passport-config.js
                const LocalStrategy = require('passport-local').Strategy  
                    // get Strategy function from pass-local library
                const bcrypt = require('bcrypt')

                function initialize(passport) {
                    const authenticateUser = (email, password, done) => {
                        // done function: used when done authenticating a user. Function is from
                        //              password-flash
                        const user= getUserByEmail(email) 
                        if(user == null) {
                            return done(null, false, {message:'No user with that email'})
                        }

                        try {
                            if (await bcrypt.compare(password, user.password)) {
                                ...
                            } else {
                                return done(null, false, {message:'Password incorret'})
                            }
                        } catch {}
                    })

                    // Use the local Strategy and declare the options
                    passport.use(new LocalStrategy({usernameField: 'email', }, authenticateUser))
                    // password is automatically defaulted so the no LocalStratety is required.

                    // serializeUser is to store the user inside a session
                    passport.serializeUser((user, done) => {})

                    // deserializeUser is to remove the user from a session
                    passport.deserializeUser((id, done) => {})
                }]
        
        link: http://www.passportjs.org/packages/

    
    11a) use flash and session so that the application know how to use flash and session
        A. server.js
            a) app.use(flash())
            b) app.use(session({
                secret: process.env.SESSION_SECRET,
                resave: false,  // should we resave our session variables if there is a change? no
                saveUninitialized: false  // Should we save if there is no value in the session? no

            }))
            c) Load in the environment variables (enter at the TOP of the application):
                if (process.env.NODE_ENV != 'prodcution') {     // Meaning: That we are in 'development'
                    require('dotenv').config()
                }
                // This will load the 'dotenv' and store them in the 'process.env....'


        B. .env
            SESSION_SECRET=secret  // secret should be a random bunch of characters

        C. app.use(passport.initialize())       // function inside passport
           app.use(passport.session())      // Store our variables across the session and will be used
                                            // with the other 'app.use' that were declare from above.

        

12) PATH
    12a) PATH is pull from Node.js
        res.sendFile(path.join(__dirname, 'public', 'index.html'))
            // __dirname == current directory
            // 'public' == file name
    
    12b) set static folder
        app.use(express.static(path.join(__dirname, 'public')))
        // Any files in the 'public' file can be used without entering a path name



13) export files
    13a. package.js
        > module.exports = members
        // members == array variable name

    13.b Bring the js array into server.js
        > const members = required('./Members/)
        //./Members/ = directory file name

14) Middleware
    14) Declare:
        > const logger = (req, res, next) => {
            console.log('Hello')
            console.log(`{req.protocol}://${req.orinialUrl}`)
            // Expect result: Whole url path
            // http://localhost:3000/api/members
            next()
        }
        // next = Always appears last.
        //        moves to the next middleware function

    14b) initialize Middleware
        > app.user(logger)

// logger will always run when a request (req) is made

15) Moment - 3rd party program that formats date and time
    > npm i moment
    > const moment = required('momemnt')
    > console.log(`{req.protocol}://${req.orinialUrl}:${moment().format()}`)
    // expected result: http://localhost:3000/api/members: 2019-02-21T20:46:27-05:00


16) Get single member
    > app.get('/api/members/:id, (req,res)  => {
        //res.send(req.params.id)
        res.json(members.filter(member => member.id === parseInt(req.params.id)))
        // expect result: [{"id": 1, "name":"John Doe", "email":"john@gmail.com", "status": "active"}]
    })

17) Random number generator (3rd party tool)
    > npm i uuid
    > const uuid = required('uuid')
    > id: uuid.v4()

18) Command options
    POST (Create): add new data
    GET (Read): get data    
    PUT (Update): update data
    DELETE (Delete): remove data


19) Show API on the front end
    > <a href="/api/members">VISIT API</a>
